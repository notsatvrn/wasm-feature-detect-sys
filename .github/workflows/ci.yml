name: ci
on: [push, pull_request]
jobs:
  # skip ci if the last commit contains the appropriate tag
  skip-commit:
    runs-on: ubuntu-latest
    steps:
      - if: "contains(github.event.head_commit.message, '[skip-ci]')
          || contains(github.event.head_commit.message, '[skip ci]')
          || contains(github.event.head_commit.message, '[ci-skip]')
          || contains(github.event.head_commit.message, '[ci skip]')"
        run: exit 78

  # verify that project builds (via "check" via "clippy") on linux
  linux-cargo-clippy:
    name: Run cargo clippy
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: 1.39.0
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions/checkout@v1
      - name: Prepare for restoring caches
        run: |
          rm -rf ~/.rustup
          rm -rf ~/.cargo/git
          rm -rf ~/.cargo/registry
      - name: Restore ~/.rustup
        uses: actions/cache@v1
        id: cache-rustup
        with:
          path: ~/.rustup
          key: ${{ runner.OS }}-rustup-[${{ env.RUST_TOOLCHAIN }}]-[clippy]-${{ hashFiles('rust-toolchain') }}
      - name: Install rust toolchain
        if: steps.cache-rustup.outputs.cache-hit != 'true'
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN --component clippy
      - name: Restore ~/.cache/sccache
        uses: actions/cache@v1
        id: cache-sccache
        with:
          path: ~/.cache/sccache
          key: ${{ runner.OS }}-sccache-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ~/.cargo/bin
        uses: actions/cache@v1
        id: cache-cargo-bin
        with:
          path: ~/.cargo/bin
          key: ${{ runner.OS }}-cargo-bin-[sccache]-[linux-cargo-clippy]-${{ hashFiles('**/Cargo.lock') }}
      - name: Install sccache
        if: steps.cache-cargo-bin.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/0.2.12/sccache-0.2.12-x86_64-unknown-linux-musl.tar.gz | tar zxf - --overwrite --strip-components=1 -C ~/.cargo/bin
      - name: Restore ~/.cargo/git
        uses: actions/cache@v1
        id: cache-cargo-git
        with:
          path: ~/.cargo/git
          key: ${{ runner.OS }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ~/.cargo/registry
        uses: actions/cache@v1
        id: cache-cargo-registry
        with:
          path: ~/.cargo/registry
          key: ${{ runner.OS }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ./target
        uses: actions/cache@v1
        id: cache-target
        with:
          path: target
          key: ${{ runner.OS }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - if: "steps.cache-cargo-git     .outputs.cache-hit != 'true'
          || steps.cache-cargo-registry.outputs.cache-hit != 'true'
          || steps.cache-target        .outputs.cache-hit != 'true'"
        run: cargo fetch
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --frozen --all-features --all-targets -- -D warnings

  # build the documentation
  linux-cargo-docs:
    name: Run cargo docs
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: 1.39.0
    steps:
      - uses: actions/checkout@v1
      - name: Prepare for restoring caches
        run: |
          rm -rf ~/.rustup
          rm -rf ~/.cargo/git
          rm -rf ~/.cargo/registry
      - name: Restore ~/.rustup
        uses: actions/cache@v1
        id: cache-rustup
        with:
          path: ~/.rustup
          key: ${{ runner.OS }}-rustup-[${{ env.RUST_TOOLCHAIN }}]-${{ hashFiles('rust-toolchain') }}
      - name: Install rust toolchain
        if: steps.cache-rustup.outputs.cache-hit != 'true'
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN
      - name: Restore ~/.cache/sccache
        uses: actions/cache@v1
        id: cache-sccache
        with:
          path: ~/.cache/sccache
          key: ${{ runner.OS }}-sccache-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ~/.cargo/git
        uses: actions/cache@v1
        id: cache-cargo-git
        with:
          path: ~/.cargo/git
          key: ${{ runner.OS }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ~/.cargo/registry
        uses: actions/cache@v1
        id: cache-cargo-registry
        with:
          path: ~/.cargo/registry
          key: ${{ runner.OS }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ./target
        uses: actions/cache@v1
        id: cache-target
        with:
          path: target
          key: ${{ runner.OS }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - if: "steps.cache-cargo-git     .outputs.cache-hit != 'true'
          || steps.cache-cargo-registry.outputs.cache-hit != 'true'
          || steps.cache-target        .outputs.cache-hit != 'true'"
        run: cargo fetch
      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --frozen --all-features --no-deps --package wasm-feature-detect-sys
      - env:
          PERSONAL_TOKEN: ${{ secrets.ACTIONS_GH_PAGES_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: ./target/doc
          SCRIPT_MODE: true
        run: wget -qO - https://raw.githubusercontent.com/interfaces-rs/actions-gh-pages/v2.5.1/entrypoint.sh | bash -

  # verify that code is formatted
  linux-cargo-fmt:
    name: Run cargo fmt
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: nightly
    steps:
      - uses: actions/checkout@v1
      - name: Prepare for restoring caches
        run: |
          rm -rf ~/.rustup
      - name: Restore ~/.rustup
        uses: actions/cache@v1
        id: cache-rustup
        with:
          path: ~/.rustup
          key: ${{ runner.OS }}-rustup-[${{ env.RUST_TOOLCHAIN }}]-[rustfmt]-${{ hashFiles('rust-toolchain') }}
      - name: Install rust toolchain
        if: steps.cache-rustup.outputs.cache-hit != 'true'
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN --component rustfmt
      - if: "steps.cache-cargo-git     .outputs.cache-hit != 'true'
          || steps.cache-cargo-registry.outputs.cache-hit != 'true'
          || steps.cache-target        .outputs.cache-hit != 'true'"
        run: cargo "+$RUST_TOOLCHAIN" fetch
      - name: Run cargo fmt
        run: cargo "+$RUST_TOOLCHAIN" fmt --all -- --check

  # verify that tests pass on linux
  linux-cargo-test:
    name: Run cargo test
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: 1.39.0
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions/checkout@v1
      - name: Prepare for restoring caches
        run: |
          rm -rf ~/.rustup
          rm -rf ~/.cargo/git
          rm -rf ~/.cargo/registry
      - name: Restore ~/.rustup
        uses: actions/cache@v1
        id: cache-rustup
        with:
          path: ~/.rustup
          key: ${{ runner.OS }}-rustup-[${{ env.RUST_TOOLCHAIN }}]-${{ hashFiles('rust-toolchain') }}
      - name: Install rust toolchain
        if: steps.cache-rustup.outputs.cache-hit != 'true'
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN
      - name: Restore ~/.cache/sccache
        uses: actions/cache@v1
        id: cache-sccache
        with:
          path: ~/.cache/sccache
          key: ${{ runner.OS }}-sccache-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ~/.cargo/bin
        uses: actions/cache@v1
        id: cache-cargo-bin
        with:
          path: ~/.cargo/bin
          key: ${{ runner.OS }}-cargo-bin-[sccache:wasm-pack]-[linux-cargo-clippy]-${{ hashFiles('**/Cargo.lock') }}
      - name: Install sccache and wasm-pack
        if: steps.cache-cargo-bin.outputs.cache-hit != 'true'
        run: |
          curl -L      https://github.com/mozilla/sccache/releases/download/0.2.12/sccache-0.2.12-x86_64-unknown-linux-musl.tar.gz | tar zxf - --overwrite --strip-components=1 -C ~/.cargo/bin
          curl -L https://github.com/rustwasm/wasm-pack/releases/download/v0.8.1/wasm-pack-v0.8.1-x86_64-unknown-linux-musl.tar.gz | tar zxf - --overwrite --strip-components=1 -C ~/.cargo/bin
      - name: Restore ~/.cargo/git
        uses: actions/cache@v1
        id: cache-cargo-git
        with:
          path: ~/.cargo/git
          key: ${{ runner.OS }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ~/.cargo/registry
        uses: actions/cache@v1
        id: cache-cargo-registry
        with:
          path: ~/.cargo/registry
          key: ${{ runner.OS }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Restore ./target
        uses: actions/cache@v1
        id: cache-cargo-target
        with:
          path: target
          key: ${{ runner.OS }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Configure node
        uses: actions/setup-node@v1
        with:
          node-version: "13.x"
      - run: npm ci
      - if: "steps.cache-cargo-git     .outputs.cache-hit != 'true'
          || steps.cache-cargo-registry.outputs.cache-hit != 'true'
          || steps.cache-target        .outputs.cache-hit != 'true'"
        run: cargo fetch
      - run: wasm-pack test --node -- --frozen --all-features --all-targets
